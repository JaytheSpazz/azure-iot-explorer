trigger: none

stages:
  - stage: 'build'
    displayName: 'Build and Test'
    pool:
      vmImage: 'ubuntu-16.04'
    jobs:
    - job: build_and_test
      steps:
      - template: .\build-and-test-template.yml

  - stage: 'package'
    displayName: 'Package for all platforms'
    dependsOn: 'build'
    jobs:
    - job: packageWindows
      displayName: "Package for Windows"

      pool:
        vmImage: 'vs2017-win2016'

      steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '12.x'
          
      - template: '.\build-windows.yml'

      - task: CopyFiles@2
        displayName: 'ArtifactIgnore'
        inputs:
          SourceFolder: '$(Build.SourcesDirectory)/'
          Contents: '.artifactignore'
          TargetFolder: '$(Build.SourcesDirectory)/dist/'

      - publish: $(Build.SourcesDirectory)/dist/
        displayName: 'Staging artifact for signing'

    - job: packageMac
      displayName: "Package for MacOS"

      pool:
        vmImage: 'macos-10.13'

      steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '12.x'
          
      - template: '.\build-mac.yml'

      - task: CopyFiles@2
        displayName: 'ArtifactIgnore'
        inputs:
          SourceFolder: '$(Build.SourcesDirectory)/'
          Contents: '.artifactignore'
          TargetFolder: '$(Build.SourcesDirectory)/dist/'

      - publish: $(Build.SourcesDirectory)/dist/
        displayName: 'Staging artifact for signing'
        

    - job: packageLinux
      displayName: "Package for Linux"
      pool:
          vmImage: 'ubuntu-16.04'

      steps:
        - task: NodeTool@0
          inputs:
            versionSpec: '12.x'
            
        - template: '.\build-linux.yml'

        - task: CopyFiles@2
          displayName: 'ArtifactIgnore'
          inputs:
            SourceFolder: '$(Build.SourcesDirectory)/'
            Contents: '.artifactignore'
            TargetFolder: '$(Build.SourcesDirectory)/dist/'

        - publish: $(Build.SourcesDirectory)/dist/
          displayName: 'Staging artifact for signing'

  - stage: 'codeSign'
    displayName: 'CodeSign and Release'
    dependsOn: 'package'
    pool:
      vmImage: 'ubuntu-16.04'
    jobs:
    - job: sign
      steps:
      - task: DownloadPipelineArtifact@2
        displayName: 'Stage artifacts for signing'
        inputs:
          buildType: 'current'
          targetPath: '$(Pipeline.Workspace)/staging'

      - task: EsrpCodeSigning@1
        displayName: 'signWindows'
        inputs:
          ConnectedServiceName: 'Azure IoT Explorer CodeSign'
          FolderPath: '$(Pipeline.Workspace)/staging'
          Pattern: '*.msi'
          signConfigType: 'inlineSignParams'
          inlineOperation: |
            [
              {
                "KeyCode": "CP-230012",
                "OperationCode": "SigntoolSign",
                "Parameters": {
                  "OpusName": "Microsoft",
                  "OpusInfo": "http://www.microsoft.com",
                  "FileDigest": "/fd \"SHA256\"",
                  "PageHash": "/NPH",
                  "TimeStamp": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                },
                "ToolName": "sign",
                "ToolVersion": "1.0"
              },
              {
                "KeyCode": "CP-230012",
                "OperationCode": "SigntoolVerify",
                "Parameters": {
                  "VerifyAll": "/all"
                },
                "ToolName": "sign",
                "ToolVersion": "1.0"
              }
            ]
          SessionTimeout: '60'
          MaxConcurrency: '50'
          MaxRetryAttempts: '5'
          VerboseLogin: false

      - task: EsrpCodeSigning@1
        displayName: 'signMac_harden'
        inputs:
          ConnectedServiceName: 'Azure IoT Explorer CodeSign'
          FolderPath: '$(Pipeline.Workspace)/staging'
          Pattern: '*.dmg'
          signConfigType: 'inlineSignParams'
          inlineOperation: |
            [
                {
                  "KeyCode" : "CP-401337-Apple",
                  "OperationCode" : "MacAppDeveloperSign",
                  "Parameters" : {"Hardening":"--options=runtime"},
                  "ToolName" : "sign",
                  "ToolVersion" : "1.0"
                }
            ]
          SessionTimeout: '60'
          MaxConcurrency: '50'
          MaxRetryAttempts: '5'
          VerboseLogin: false

      - task: EsrpCodeSigning@1
        displayName: 'signMac_notarize'
        inputs:
          ConnectedServiceName: 'Azure IoT Explorer CodeSign'
          FolderPath: '$(Pipeline.Workspace)/staging'
          Pattern: '*.dmg'
          signConfigType: 'inlineSignParams'
          inlineOperation: |
            [
              {
                "KeyCode" : "CP-401337-Apple",
                "OperationCode" : "MacAppNotarize",
                "Parameters" : {"BundleId":"com.microsoft.Azure.IoTExplorer"},
                "ToolName" : "sign",
                "ToolVersion" : "1.0"
              }
            ]
          SessionTimeout: '60'
          MaxConcurrency: '50'
          MaxRetryAttempts: '5'
          VerboseLogin: false

      - task: EsrpCodeSigning@1
        displayName: 'signLinux'
        inputs:
          ConnectedServiceName: 'Azure IoT Explorer CodeSign'
          FolderPath: '$(Pipeline.Workspace)/staging'
          Pattern: '*.deb'
          signConfigType: 'inlineSignParams'
          inlineOperation: |
            [
              {
                "KeyCode" : "CP-450778-Pgp",
                "OperationCode" : "LinuxSign",
                "Parameters" : {},
                "ToolName" : "sign",
                "ToolVersion" : "1.0"
              }
            ]
          SessionTimeout: '60'
          MaxConcurrency: '50'
          MaxRetryAttempts: '5'
          VerboseLogin: false

      - task: CopyFiles@2
        displayName: 'Flatten signed artifact files for publish'
        inputs:
          SourceFolder: '$(Pipeline.Workspace)/staging'
          Contents: |
            '*.deb'
            '*.dmg'
            '*.msi'
          FlattenFolders: true
          TargetFolder: '$(Pipeline.Workspace)/release/'

      - task: PublishPipelineArtifact@1
        displayName: 'Publish signed artifacts'
        inputs:
          targetPath: '$(Pipeline.Workspace)/release/'

      - task: GitHubRelease@1
        inputs:
          gitHubConnection: 'Azure IoT Explorer Github Service Connection'
          repositoryName: '$(Build.Repository.Name)'
          action: 'create'
          target: '$(Build.SourceVersion)'
          tagSource: 'gitTag'
          isDraft: true
          addChangeLog: true
          assetUploadMode: 'replace'
          changeLogCompareToRelease: 'lastFullRelease'
          changeLogType: 'commitBased'
          assets: '$(Pipeline.Workspace)/release/*'